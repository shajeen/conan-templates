parameters:
  - name: conanLoginUsername
    type: string
    default: ""
  - name: conanPassword
    type: string
    default: ""
  - name: conanUploadOnlyWhenStable
    type: string
    default: "true"
  - name: jobsMaxParallel
    type: number
    default: 10
  - name: pythonVersion
    type: string
    default: "3.7.x"
  - name: enableVsBuilds
    type: boolean
    default: true
  - name: vsVersions
    type: string
    default: "15,16"  # Possible values: any combination of 15, 16
  - name: enableAppleClangBuilds
    type: boolean
    default: false
  - name: appleClangVersions
    type: string
    default: "10,11"  # Possible values: any combination of "10", "11"
  - name: splitByBuildTypes
    type: string
    default: "false"  # Possible values: "false", "true"
  - name: requireMoreDiskSpace
    type: string
    default: "false" # Possible values: "false", "true" - Deletes the entire Java stack for Windows images
  - name: collectionsBasePath
    type: string
    default: "." # The path to where the recipe/s is/are
  - name: collectionsProvideAsPythonRequires
    type: object
    default:
      path: ""
      reference: ""
  - name: collectionsStages
    type: object # A list of stage names
    default:
        - ""
  - name: collectionsRecipes
    type: object # A list of directories which each contains a single recipe
    default:
        - name: ""
          stage: ""
  # !!! IF YOU OVERRIDE THE FOLLOWING VALUES YOU ARE PROBABLY DOING SOMETHING WRONG !!!
  - name: vsVersionsMapping
    type: object
    default:
      - version: 15
        name: 2017
        image: vs2017-win2016
      - version: 16
        name: 2019
        image: windows-2019
  - name: appleClangVersionsMapping
    type: object
    default:
      - version: 10.0
        image: macOS-10.14
        path: /Applications/Xcode_10.3.app
      - version: 11.0
        image: macOS-10.15
        path: /Applications/Xcode_11.3.1.app

stages:
- ${{ each stage in parameters.collectionsStages }}:
  - stage: "${{ stage }}"
    jobs:
    - ${{ if eq(parameters.enableAppleClangBuilds, 'true') }}:
      - job: macOS
        pool:
          vmImage: $(AZP_BUILD_WORKER_IMAGE)
        timeoutInMinutes: 120
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: ${{ parameters.pythonVersion }}
        - script: |
            pip install --upgrade pip cmake
            python --version
            pip --version
            which cmake
            cmake --version
            pip install bincrafters_package_tools
            conan user
          displayName: Install Conan
        - script: |
            if [[ ! $version == *".0" ]]; then
              CONAN_APPLE_CLANG_VERSIONS=$CONAN_APPLE_CLANG_VERSIONS".0"
            fi;
            sudo xcode-select -switch $AZP_XCODE_PATH
            clang++ --version
            bincrafters-package-tools --auto
          env:
            CONAN_LOGIN_USERNAME: ${{ parameters.conanLoginUsername }}
            CONAN_PASSWORD: ${{ parameters.conanPassword }}
          displayName: Run

        strategy:
          maxParallel: ${{ parameters.jobsMaxParallel }}
          matrix:
            ${{ if eq(parameters.splitByBuildTypes, 'true') }}:
              ${{ each clang in parameters.appleClangVersionsMapping }}:
                ${{ if contains(parameters.appleClangVersions, clang.version) }}:
                  Apple-Clang ${{ clang.version }} Release:
                    AZP_BUILD_WORKER_IMAGE: ${{ clang.image }}
                    AZP_XCODE_PATH: ${{ clang.path }}
                    CONAN_APPLE_CLANG_VERSIONS: ${{ clang.version }}
                    CONAN_BUILD_TYPES: Release
                  Apple-Clang ${{ clang.version }} Debug:
                    AZP_BUILD_WORKER_IMAGE: ${{ clang.image }}
                    AZP_XCODE_PATH: ${{ clang.path }}
                    CONAN_APPLE_CLANG_VERSIONS: ${{ clang.version }}
                    CONAN_BUILD_TYPES: Debug
            ${{ if ne(parameters.splitByBuildTypes, 'true') }}:
              ${{ each clang in parameters.appleClangVersionsMapping }}:
                ${{ if contains(parameters.appleClangVersions, clang.version) }}:
                  Apple-Clang ${{ clang.version }}:
                    AZP_BUILD_WORKER_IMAGE: ${{ clang.image }}
                    AZP_XCODE_PATH: ${{ clang.path }}
                    CONAN_APPLE_CLANG_VERSIONS: ${{ clang.version }}

    - ${{ if eq(parameters.enableVsBuilds, 'true') }}:
      - job: Windows
        pool:
          vmImage: $(AZP_BUILD_WORKER_IMAGE)
        timeoutInMinutes: 180
        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: ${{ parameters.pythonVersion }}
        - powershell: |
            $delete = $(
              Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\ProgramData\chocolatey"';
              Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Strawberry\"';
              Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Program Files (x86)\CMake\bin"';
              Start-Process -PassThru -NoNewWindow cmd.exe '/c rmdir /S /Q "C:\Program Files\CMake\bin"';
              Start-Process -PassThru -NoNewWindow cmd.exe '/c del /S /Q "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"';
              Start-Process -PassThru -NoNewWindow cmd.exe '/c del /S /Q "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"';
            )
            $delete | Wait-Process
            python -m pip install --upgrade pip
            pip install --upgrade cmake
            if ($env:CONAN_VISUAL_VERSIONS -eq 15) {
              New-Item -ItemType SymbolicLink -Path "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" `
              -Target (get-command cmake).Path
            }
            if ($env:CONAN_VISUAL_VERSIONS -eq 16) {
              New-Item -ItemType SymbolicLink -Path "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" `
              -Target (get-command cmake).Path
            }
            python --version
            pip --version
            echo (get-command cmake).Path
            cmake --version
            pip install bincrafters-package-tools
            Start-Process -Wait -NoNewWindow cmd.exe '/c conan user'
          displayName: Install Conan
        - powershell: |
            if ('${{ parameters.requireMoreDiskSpace }}' -eq 'true') {
              Write-Host "requireMoreDiskSpace is True - Delete Java and Dodnet stacks for more disk space"
              Start-Process -NoNewWindow cmd.exe '/c (del /f/s/q "C:\Program Files\Java" > nul) && (rmdir /S /Q "C:\Program Files\Java")'
              Start-Process -NoNewWindow cmd.exe '/c (del /f/s/q "C:\Program Files\dotnet\sdk\" > nul) && (rmdir /S /Q "C:\Program Files\dotnet\sdk\")'
            }
            if ('${{ parameters.collectionsProvideAsPythonRequires.path }}' -ne '') {
              conan export ${{ parameters.collectionsProvideAsPythonRequires.path }} ${{ parameters.collectionsProvideAsPythonRequires.reference }}
            }
            $rootDir = $pwd.path
            cd $env:CONAN_RECIPE_DIRECTORY
            if ($env:RECIPE_BUILD_TYPE -eq 'header_only') {
              python ('{0}\build_header_only.py' -f $rootDir)
            } else {
              if (Test-Path "$($rootDir)\build.py") {
                python ('{0}\build.py' -f $rootDir)
              } else {
                bincrafters-package-tools --auto
              }
            }
          env:
            CONAN_LOGIN_USERNAME: ${{ parameters.conanLoginUsername }}
            CONAN_PASSWORD: ${{ parameters.conanPassword }}
            CONAN_UPLOAD_ONLY_WHEN_STABLE: ${{ parameters.conanUploadOnlyWhenStable }}
          displayName: Run
        strategy:
          maxParallel: ${{ parameters.jobsMaxParallel }}
          matrix:
            ${{ each recipe in parameters.collectionsRecipes }}:
              ${{ if eq(recipe.stage, stage) }}:
                ${{ if eq(recipe.type, 'header_only') }}:
                  VS 2019 ${{ recipe.name }}:
                    AZP_BUILD_WORKER_IMAGE: windows-2019
                    RECIPE_BUILD_TYPE: header_only
                    CONAN_VISUAL_VERSIONS: 16
                    CONAN_RECIPE_DIRECTORY: ${{ format('{0}\{1}', parameters.collectionsBasePath, recipe.name) }}
                ${{ if ne(recipe.type, 'header_only') }}:
                  ${{ if eq(parameters.splitByBuildTypes, 'true') }}:
                    ${{ each vs in parameters.vsVersionsMapping }}:
                      ${{ if contains(parameters.vsVersions, vs.version) }}:
                        VS ${{ vs.name }} Release ${{ recipe.name }}:
                          AZP_BUILD_WORKER_IMAGE: ${{ vs.image }}
                          CONAN_VISUAL_VERSIONS: ${{ vs.version }}
                          CONAN_BUILD_TYPES: Release
                          CONAN_RECIPE_DIRECTORY: ${{ format('{0}\{1}', parameters.collectionsBasePath, recipe.name) }}
                        VS ${{ vs.name }} Debug ${{ recipe.name }}:
                          AZP_BUILD_WORKER_IMAGE: ${{ vs.image }}
                          CONAN_VISUAL_VERSIONS: ${{ vs.version }}
                          CONAN_BUILD_TYPES: Debug
                          CONAN_RECIPE_DIRECTORY: ${{ format('{0}\{1}', parameters.collectionsBasePath, recipe.name) }}
                  ${{ if ne(parameters.splitByBuildTypes, 'true') }}:
                    ${{ each vs in parameters.vsVersionsMapping }}:
                      ${{ if contains(parameters.vsVersions, vs.version) }}:
                        VS ${{ vs.name }} ${{ recipe.name }}:
                          AZP_BUILD_WORKER_IMAGE: ${{ vs.image }}
                          CONAN_VISUAL_VERSIONS: ${{ vs.version }}
                          CONAN_RECIPE_DIRECTORY: ${{ format('{0}\{1}', parameters.collectionsBasePath, recipe.name) }}
